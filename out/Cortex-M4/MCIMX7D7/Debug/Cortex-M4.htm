<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\MDK_Projects\i.MX7_test\Blank_solution\out\Cortex-M4\MCIMX7D7\Debug\Cortex-M4.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\MDK_Projects\i.MX7_test\Blank_solution\out\Cortex-M4\MCIMX7D7\Debug\Cortex-M4.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6240002: Last Updated: Thu Apr 24 14:04:33 2025
<BR><P>
<H3>Maximum Stack Usage =        112 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; InitRetargetIOUSART &rArr; dbg_uart_init &rArr; get_uart_clock_freq &rArr; CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ce]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">osRtxErrorNotify</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[6b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6b]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[af]">abort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">abort</a><BR>
 <LI><a href="#[92]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">osRtxIdleThread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6b]">ADC1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6c]">ADC2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[15]">APBHDMA_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3c]">AnalogBrownOut_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3a]">AnalogTempSensor_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[17]">BCH_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[72]">CAAM_WRAPPER0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[73]">CAAM_WRAPPER1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7b]">CAAM_WRAPPER2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7c]">CAAM_WRAPPER3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5e]">CCM1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5f]">CCM2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[67]">CCM_SRC_GPC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[66]">CPU_CTIIRQn_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[65]">CPU_PMUIRQn_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[11]">CSI_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1e]">CSU_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[b]">DAP_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[d]">DBGMON_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[16]">EIM_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[81]">ENET1_MAC0_IRQ_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7f]">ENET1_MAC0_Rx_Tx_Done1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[80]">ENET1_MAC0_Rx_Tx_Done2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[82]">ENET1_MAC0_TimerInt_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6f]">ENET2_MAC0_IRQ_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6d]">ENET2_MAC0_Rx_Tx_Done1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6e]">ENET2_MAC0_Rx_Tx_Done2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[70]">ENET2_MAC0_TimerInt_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7e]">EPDC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[77]">FLEXCAN1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[78]">FLEXCAN2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1a]">FTM1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1b]">FTM2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[60]">GPC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[49]">GPIO1_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4a]">GPIO1_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[48]">GPIO1_INT0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[47]">GPIO1_INT1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[46]">GPIO1_INT2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[45]">GPIO1_INT3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[44]">GPIO1_INT4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[43]">GPIO1_INT5_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[42]">GPIO1_INT6_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[41]">GPIO1_INT7_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4b]">GPIO2_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4c]">GPIO2_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4d]">GPIO3_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4e]">GPIO3_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[4f]">GPIO4_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[50]">GPIO4_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[51]">GPIO5_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[52]">GPIO5_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[53]">GPIO6_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[54]">GPIO6_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[55]">GPIO7_Combined_0_15_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[56]">GPIO7_Combined_16_31_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[18]">GPMII_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[a]">GPR_IRQ_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[40]">GPT1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3f]">GPT2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3e]">GPT3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3d]">GPT4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7d]">HS_IRQ0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[14]">HS_IRQ1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2d]">I2C2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2e]">I2C3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2f]">I2C4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[59]">KPP_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[f]">LCDIF_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[22]">MIPI_CSI_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[32]">MIPI_DSI_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[61]">MU_A7_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6a]">MU_M4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[83]">PCIE_CTRL_IRQ0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[84]">PCIE_CTRL_IRQ1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[85]">PCIE_CTRL_IRQ2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[86]">PCIE_CTRL_IRQ3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[88]">PCIE_CTRL_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[79]">PERFMON1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[7a]">PERFMON2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5a]">PWM1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5b]">PWM2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5c]">PWM3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5d]">PWM4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[12]">PXP_IRQ0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[37]">PXP_IRQ1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from irq_armv7m.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[74]">QSPI_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[30]">RDC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[64]">RTIC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[68]">SAI1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[69]">SAI2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[3b]">SAI3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[38]">SCTR_IRQ0_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[39]">SCTR_IRQ1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[c]">SDMA_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[63]">SIM1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[10]">SIM2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1c]">SNVS_HP_WRAPPER1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1d]">SNVS_HP_WRAPPER2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[e]">SNVS_WRAPPER_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[62]">SRC_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from irq_armv7m.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced 2 times from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[9]">SysTick_Handler</a> from irq_armv7m.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[8a]">SystemInit</a> from system_iMX7D_M4.o(.text.SystemInit) referenced from startup_iMX7D_M4.o(.text)
 <LI><a href="#[71]">TPR_IRQ_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[75]">TZASC1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[23]">UART1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[24]">UART2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[25]">UART3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[26]">UART4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[27]">UART5_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[19]">UART6_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[87]">UART7_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[34]">USB_OH2_OTG_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[31]">USB_OH3_HOST_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[33]">USB_OH3_OTG_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[35]">USB_OTG1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[36]">USB_OTG2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[1f]">USDHC1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[20]">USDHC2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[21]">USDHC3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[57]">WDOG1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[58]">WDOG2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[13]">WDOG3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[76]">WDOG4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[8b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_iMX7D_M4.o(.text)
 <LI><a href="#[28]">eCSPI1_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[29]">eCSPI2_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2a]">eCSPI3_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[2b]">eCSPI4_IRQHandler</a> from startup_iMX7D_M4.o(.text) referenced from startup_iMX7D_M4.o(RESET)
 <LI><a href="#[89]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[92]">osRtxIdleThread</a> from RTX_Config.o(.text.osRtxIdleThread) referenced 2 times from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[96]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced 2 times from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[98]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[9a]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[99]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[93]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced 2 times from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[97]">osThreadEntry</a> from rtx_thread.o(.text.osThreadEntry) referenced 2 times from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[8d]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced 2 times from rtx_delay.o(.text.osDelay)
 <LI><a href="#[8e]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced 2 times from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[8f]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced 2 times from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[90]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[91]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced 2 times from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[94]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced 2 times from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[95]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced 2 times from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[8c]">threadA</a> from main.o(.text.threadA) referenced 2 times from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[113]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[114]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[115]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[116]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[117]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, irq_armv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>APBHDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>AnalogBrownOut_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AnalogTempSensor_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BCH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAAM_WRAPPER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CAAM_WRAPPER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>CAAM_WRAPPER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>CAAM_WRAPPER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CCM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CCM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CCM_SRC_GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CPU_CTIIRQn_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CPU_PMUIRQn_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CSU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DBGMON_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ENET1_MAC0_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ENET1_MAC0_Rx_Tx_Done1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>ENET1_MAC0_Rx_Tx_Done2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ENET1_MAC0_TimerInt_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ENET2_MAC0_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ENET2_MAC0_Rx_Tx_Done1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>ENET2_MAC0_Rx_Tx_Done2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>ENET2_MAC0_TimerInt_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EPDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FLEXCAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>FLEXCAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>FTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPIO1_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPIO1_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPIO1_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPIO1_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPIO1_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>GPIO1_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>GPIO1_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>GPIO1_INT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIO1_INT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIO1_INT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPIO2_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPIO2_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPIO3_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPIO3_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>GPIO4_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>GPIO4_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>GPIO5_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>GPIO5_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>GPIO6_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>GPIO6_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>GPIO7_Combined_0_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>GPIO7_Combined_16_31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPMII_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>GPT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>HS_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>HS_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>KPP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>LCDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MIPI_CSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>MIPI_DSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>MU_A7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>MU_M4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>PCIE_CTRL_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>PCIE_CTRL_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>PCIE_CTRL_IRQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>PCIE_CTRL_IRQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>PCIE_CTRL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PERFMON1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PERFMON2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PWM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PXP_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PXP_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RTIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SCTR_IRQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SCTR_IRQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SNVS_HP_WRAPPER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SNVS_HP_WRAPPER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SNVS_WRAPPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>TPR_IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TZASC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_OH2_OTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_OH3_HOST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USB_OH3_OTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB_OTG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB_OTG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USDHC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USDHC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USDHC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WDOG1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WDOG2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDOG3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>WDOG4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>eCSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>eCSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>eCSPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>eCSPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_iMX7D_M4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[118]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>BOARD_ClockInit</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, board.o(.text.BOARD_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BOARD_ClockInit &rArr; CCM_UpdateRoot &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_UpdateRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>BOARD_RdcInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(.text.BOARD_RdcInit))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>CCM_ANALOG_GetSysPllFreq</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ccm_analog_imx7d.o(.text.CCM_ANALOG_GetSysPllFreq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_clock_freq
</UL>

<P><STRONG><a name="[a7]"></a>CCM_GetRootDivider</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ccm_imx7d.o(.text.CCM_GetRootDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_clock_freq
</UL>

<P><STRONG><a name="[a6]"></a>CCM_UpdateRoot</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ccm_imx7d.o(.text.CCM_UpdateRoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCM_UpdateRoot &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[bc]"></a>EvrRtxDelay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[e8]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[bd]"></a>EvrRtxDelayError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[102]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[ed]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c0]"></a>EvrRtxKernelError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[cf]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[bf]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[104]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[c1]"></a>EvrRtxKernelStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[108]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[d1]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[d6]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[d8]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[da]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[d3]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[d5]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[e9]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[10b]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[c7]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[c3]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[109]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[eb]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[cc]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[de]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[cd]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[c8]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[ca]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[10c]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[ec]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c6]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[ee]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[e3]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[e2]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>

<P><STRONG><a name="[ef]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[f9]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[110]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[10e]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[100]"></a>EvrRtxThreadError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[ff]"></a>EvrRtxThreadExit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[f5]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[ea]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[10d]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[101]"></a>EvrRtxThreadNew</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[f1]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[f2]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[f0]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[fd]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[a9]"></a>InitRetargetIOUSART</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io_user.o(.text.InitRetargetIOUSART))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = InitRetargetIOUSART &rArr; dbg_uart_init &rArr; get_uart_clock_freq &rArr; CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[107]"></a>OS_Tick_Enable</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[106]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[105]"></a>OS_Tick_Setup</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[b7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_iMX7D_M4.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system_iMX7D_M4.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_iMX7D_M4.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>UART_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, uart_imx.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Init &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[ac]"></a>UART_SetBaudRate</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, uart_imx.o(.text.UART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_assert</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_GetRootDivider
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_UpdateRoot
</UL>

<P><STRONG><a name="[af]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[b0]"></a>configure_uart_pins</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pin_mux.o(.text.configure_uart_pins))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[aa]"></a>dbg_uart_init</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, board.o(.text.dbg_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dbg_uart_init &rArr; get_uart_clock_freq &rArr; CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_clock_freq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_uart_pins
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_UpdateRoot
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRetargetIOUSART
</UL>

<P><STRONG><a name="[b2]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[b1]"></a>get_uart_clock_freq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, clock_freq.o(.text.get_uart_clock_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_uart_clock_freq &rArr; CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_ANALOG_GetSysPllFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_GetRootDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_uart_init
</UL>

<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = main &rArr; InitRetargetIOUSART &rArr; dbg_uart_init &rArr; get_uart_clock_freq &rArr; CCM_GetRootDivider &rArr; __aeabi_assert &rArr; fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRetargetIOUSART
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_ClockInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_RdcInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bb]"></a>osDelay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadA
</UL>

<P><STRONG><a name="[b8]"></a>osKernelInitialize</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelBeforeInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>osKernelStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>osMessageQueueGet</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[c9]"></a>osMessageQueuePut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[ce]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[92]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, RTX_Config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[be]"></a>osRtxKernelBeforeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osRtxKernelBeforeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[9e]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[d0]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[d2]"></a>osRtxMemoryFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[d4]"></a>osRtxMemoryInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[cb]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[d7]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[d9]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[df]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[e1]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[e4]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[9f]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[c5]"></a>osRtxPostProcess</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[f4]"></a>osRtxThreadBeforeFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBeforeFree))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[e7]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[e6]"></a>osRtxThreadDispatch</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[db]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[10a]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[fb]"></a>osRtxThreadListRemove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[e5]"></a>osRtxThreadListSort</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
</UL>

<P><STRONG><a name="[fc]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[dd]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[9d]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[f6]"></a>osRtxThreadStartup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[f7]"></a>osRtxThreadSwitch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[f8]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadWaitEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[dc]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[a0]"></a>osRtxTick_Handler</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9a]"></a>osRtxTimerSetup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[99]"></a>osRtxTimerThread</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[fe]"></a>osThreadExit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadEntry
</UL>

<P><STRONG><a name="[b9]"></a>osThreadNew</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadNew
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>stderr_putchar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget_io_user.o(.text.stderr_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b3]"></a>stdout_putchar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, retarget_io_user.o(.text.stdout_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8c]"></a>threadA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.threadA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = threadA &rArr; osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[11d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ae]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputs
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[ad]"></a>fwrite</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fwrite.o(i.fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fwrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[111]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadA
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8d]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[8e]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[8f]"></a>svcRtxKernelStart</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[e0]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[96]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[91]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[90]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[f3]"></a>osRtxThreadFree</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBeforeFree
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[95]"></a>svcRtxThreadNew</STRONG> (Thumb, 600 bytes, Stack size 40 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[97]"></a>osThreadEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadEntry))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[98]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[94]"></a>svcRtxThreadExit</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[93]"></a>osRtxTimerTick</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
